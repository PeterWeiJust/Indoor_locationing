diff --git a/wifi_class_keras.py b/wifi_class_keras.py
index 7afb6eb..41c4211 100644
--- a/wifi_class_keras.py
+++ b/wifi_class_keras.py
@@ -19,6 +19,7 @@ from keras.models import Sequential,Model,load_model
 from keras.layers import Dense, concatenate, LSTM, TimeDistributed,Input,Dropout
 from sklearn.preprocessing import MinMaxScaler
 from sklearn.metrics import mean_squared_error
+from sklearn.svm import SVC
 from keras.optimizers import Adam, RMSprop,SGD
 from keras.utils import plot_model
 from keras.callbacks import EarlyStopping, Callback, TensorBoard
@@ -29,21 +30,23 @@ from wandb.keras import WandbCallback
 np.random.seed(7)
 
 # Hyper-parameters
-wifi_input_size = 193
-batch_size = 100
-hidden_size = 128
-output_dim = 2
-learning_rate = 0.001
-epoch=5
+# wifi_input_size = 193
+# batch_size = 100
+# hidden_size = 128
+# output_dim = 400
+# learning_rate = 0.001
+# epoch=5
 
 model_name = "wifiClass_bucharest"
 
-wandb.init(entity="mmloc",project=model_name,sync_tensorboard=True,
-           config={"epochs": epoch,"batch_size": batch_size,"hidden_size":hidden_size,
-                   "learning_rate":learning_rate,
-                   "output_dim":output_dim,
-                   }
-           )
+
+wandb.init(entity="mmloc",project=model_name,sync_tensorboard=True)
+# Set and save hyperparameters         
+wandb.config.gamma = "auto"
+wandb.config.C = 1
+wandb.config.seed = 0
+
+
 
 training=WifiClusterDataset()
 WifiTrain=training.trainx
@@ -63,28 +66,37 @@ locationval=np_utils.to_categorical(locationval-mins)
 output_dim=locationlabel.shape[1]
 
 
-tensorboard = TensorBoard(log_dir='logs/{}'.format(model_name))
-model = Sequential()
-model.add(Dense(hidden_size,activation='relu',input_dim=wifi_input_size))
-model.add(Dropout(0.5))
-model.add(Dense(hidden_size,activation='relu'))
-model.add(Dropout(0.5))
-model.add(Dense(hidden_size,activation='relu'))
-model.add(Dropout(0.5))
-model.add(Dense(activation='softmax',units=output_dim))
-model.compile(optimizer=RMSprop(learning_rate),
-                 loss='mse',metrics=["acc"])
-
-model.fit(WifiTrain, locationlabel,
-                       validation_data=(WifiVal,locationval),
-                       epochs=epoch, batch_size=batch_size, verbose=1,callbacks=[tensorboard,WandbCallback()]
-                       #shuffle=False,
-                       )
-
-model.save("romaniamodel/"+str(model_name)+".h5")
-model.save(os.path.join(wandb.run.dir, "wanbd_"+str(model_name)+".h5"))
+# tensorboard = TensorBoard(log_dir='logs/{}'.format(model_name))
+# model = Sequential()
+# model.add(Dense(hidden_size,activation='relu',input_dim=wifi_input_size))
+# model.add(Dropout(0.5))
+# model.add(Dense(hidden_size,activation='relu'))
+# model.add(Dropout(0.5))
+# model.add(Dense(hidden_size,activation='relu'))
+# model.add(Dropout(0.5))
+# model.add(Dense(activation='softmax',units=output_dim))
+# model.compile(optimizer=RMSprop(learning_rate),
+#                  loss='mse',metrics=["acc"])
+
+# model.fit(WifiTrain, locationlabel,
+#                        validation_data=(WifiVal,locationval),
+#                        epochs=epoch, batch_size=batch_size, verbose=1,callbacks=[tensorboard,WandbCallback()]
+#                        #shuffle=False,
+#                        )
+
+# model.save("romaniamodel/"+str(model_name)+".h5")
+# model.save(os.path.join(wandb.run.dir, "wanbd_"+str(model_name)+".h5"))
+
+# Fit model
+model = SVC(kernel='rbf', random_state=wandb.config.seed, gamma=wandb.config.gamma, C=wandb.config.C)
+model.fit(WifiTrain, locationlabel)
+
+# Save metrics
+wandb.log({"Train Accuracy": model.score(WifiTrain, locationlabel), 
+           "Test Accuracy": model.score(WifiVal,locationval)})
+
 fig1=plt.figure()
-locPrediction = model.predict(WifiTest, batch_size=batch_size)
+locPrediction = model.predict(WifiTest)
 locpredlabel=np.argmax(locPrediction,axis=1)+mins
 
 #aveLocPrediction = pf.get_ave_prediction(locPrediction, 100)
